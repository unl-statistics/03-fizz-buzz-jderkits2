---
title: "Homework: Fizzbuzz"
author: Jenn Derkits
format: html
---

Instructions: 

- You can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don't wish to work in.

- Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). 
- Commit the qmd file and any other files you have changed to the repository and push your changes.
- In Canvas, submit a link to your github repository containing the updated files.

# Introduction to Fizzbuzz

The "FizzBuzz Test" is a famous programming interview question.

> Write a program that prints the numbers from 1 to 30. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz"

Start by filling in the following table for the numbers 1:30 manually, to get a feel for the task.

| Input | Output |
|-------|--------|
| 1     |  1     |
| 2     |  2     |
| 3     | Fizz   |
| 4     |  4     |
| 5     | Buzz   |
| 6     | Fizz   |
| 7     |   7    |
| 8     |   8    |
| 9     | Fizz   |
| 10    | Buzz   |
| 11    |  11    |
| 12    | Fizz   |
| 13    | 13     |
| 14    | 14     |
| 15    |FizzBuzz|
| 16    | 16     |
| 17    | 17     |
| 18    | Fizz   |
| 19    | 19     |
| 20    | Buzz   |
| 21    | Fizz   |
| 22    | 22     |
| 23    | 23     |
| 24    | Fizz   |
| 25    | Buzz   |
| 26    |  26    |
| 27    |  Fizz  |
| 28    |  28    |
| 29    |  29    |
| 30    |FizzBuzz|

: Fizzbuzz for 1:30

On paper or using a tool such as [https://excalidraw.com](https://excalidraw.com), create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png. Add the picture to Git and commit/push your changes. 

![Program Flow map for FizzBuzz](flowchart.png)

In the chunk below, write code which will solve this problem for a single value `x`. You should be able to change the value of x at the top of the chunk and still get the correct answer.

```{r solo-fizzbuzz-r, echo = T}
x <- 5
if (x %% 3 == 0 && x %% 5 == 0) {
  print("FizzBuzz")
} else if (x %% 3 == 0) {
  print("Fizz")
} else if (x %% 5 == 0) {
  print("Buzz")
} else {
  print(x)
}

```


```{python solo-fizzbuzz-py, echo = T}
x = 3
if x % 3 == 0 and x % 5 == 0:
    print("FizzBuzz")
elif x % 3 == 0:
    print("Fizz")
elif x % 5 == 0:
    print("Buzz")
else:
    print(x)
    
# FizzBuzz code goes here

```

Modify the code above so that the result is stored in a value `y`.

```{r solo-fizzbuzz-stored-r, echo = T}
#change the x's to y's
x <- 7
if (x %% 3 == 0 && x %% 5 == 0) {
  y<-"FizzBuzz"
} else if (x %% 3 == 0) {
  y<-"Fizz"
} else if (x %% 5 == 0) {
  y<-"Buzz"
} else {
  y<-x
}

print(paste("For x = ", x, " my code produces ", y, sep = ""))
```


```{python solo-fizzbuzz-stored-py, echo = T}
import numpy as np
x = 3
y = np.nan
if x % 3 == 0 and x % 5 == 0:
    y = "FizzBuzz"
elif x % 3 == 0:
    y = "Fizz"
elif x % 5 == 0:
    y = "Buzz"
else:
    y = x

print("For x = "+ str(x)+ " my code produces "+ str(y))
```


# A vector of FizzBuzz

The code in the previous problem only solves FizzBuzz for a single value of `x`. Extend your code using a loop so that it will work for all values in a vector `xx`, storing values in a corresponding vector `yy`.

You can copy/paste code from previous chunks to make this chunk easier.

```{r vector-fizzbuzz-r, echo = T}
xx <- 1:30
yy <- rep(NA, times = length(xx))
#add the iterative piece loop xx
#the bracket opens after the for,in and doesn't close till the very end otherwise it gives NA
for (i in 1:length(xx)){
  x<- xx[i]

#the above goes through 1-30 then below looks at the conditions
if (x %% 3 == 0 && x %% 5 == 0) {
  yy[i]<-"FizzBuzz"
} else if (x %% 3 == 0) {
  yy[i]<-"Fizz"
} else if (x %% 5 == 0) {
  yy[i]<-"Buzz"
} else {
  yy[i]<-as.character(x) #convert the number to characters
}
}

# Printing the results in a data frame
res <- cbind(x = as.character(xx), result = yy)
res
```

```{python vector-fizzbuzz-py, echo = T}
import pandas as pd
import numpy as np

# Generate an array of numbers from 1 to 30
xx = np.array(range(1, 31))
yy = [np.nan] * len(xx)

# Apply the FizzBuzz logic
for i in range(len(xx)):
    x = xx[i]
    if x % 3 == 0 and x % 5 == 0:
        yy[i] = "FizzBuzz"
    elif x % 3 == 0:
        yy[i] = "Fizz"
    elif x % 5 == 0:
        yy[i] = "Buzz"
    else:
        yy[i] = str(x)  # Convert the number to a string/word

# Create a DataFrame with the results
res = pd.DataFrame({"x": xx, "result": yy})

# Adjust the index to start at 1
res.index = res.index + 1

# Print the DataFrame to see the results
print(res)

```

# Functions and FizzBuzz

In the previous question, you extended your fizzbuzz code to iterate through a vector `xx` and produce a result `yy`. Can you generalize this, writing a function `fizzbuzz` that takes a variable `x` and returns a corresponding fizzbuzzified variable? Your function should be able to handle `x` that is a vector or a scalar value, and should store your solution in `yy`.

```{r function-fizzbuzz-r}
xx <- sample(1:100, 10) # get a random xx
yy <- rep(NA, 10)
##This is the function line 191, line 192 in the logic vector part
fizzbuzz <- function(x) {
    result <- ifelse(x %% 3 == 0 & x %% 5 == 0, "FizzBuzz", ifelse(x %% 3 == 0, "Fizz", ifelse(x %% 5 == 0, "Buzz", as.character(x))))
  return(result)
}
#the fizzbuzz function is applied to the vector xx
yy <- fizzbuzz(x = xx)

# Printing the results in a data frame
res <- cbind(x = xx, result = yy)
res
```

```{python function-fizzbuzz-py}
import pandas as pd
from random import choices
import numpy as np

# Generate a random list of integers between 1 and 100
xx = np.array(choices(range(1, 101), k=10))

# Define the fizzbuzz function
def fizzbuzz(x):
    y = [np.nan] * len(x)  # Initialize result list with NaN values
    
    for i in range(len(x)):
        if x[i] % 3 == 0 and x[i] % 5 == 0:
            y[i] = "FizzBuzz"
        elif x[i] % 3 == 0:
            y[i] = "Fizz"
        elif x[i] % 5 == 0:
            y[i] = "Buzz"
        else:
            y[i] = str(x[i])  # Convert number to string if not divisible by 3 or 5
    
    return y

# Apply the fizzbuzz function to the array xx
yy = fizzbuzz(x=xx)

# Create a DataFrame with the results
res = pd.DataFrame({"x": xx, "result": yy})

# Adjust the index to start at 1
res.index = res.index + 1

# Print the DataFrame to see the results
print(res)

```

# Defensive Programming

You cannot always assume that the person using your functions knows what they're doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.

In R, you can use the function [`stopifnot()` to halt function execution if there is an error](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/stopifnot); this will give you a basic error message. 

```{r stopifnotdemo, error = T}
xx <- sample(1:100, 10) # Get a random xx
yy <- rep(NA, 10)

# This is the function with the logic- is it numeric? if not don't go on...
fizzbuzz <- function(x) {
  stopifnot(is.numeric(x))  # Check if x is numeric?
  result <- ifelse(x %% 3 == 0 & x %% 5 == 0, "FizzBuzz", 
                   ifelse(x %% 3 == 0, "Fizz", 
                          ifelse(x %% 5 == 0, "Buzz", as.character(x))))
  return(result)
}

# Apply the fizzbuzz function to the vector xx
yy <- fizzbuzz(x = xx)

# Print the results in a data frame
res <- cbind(x = xx, result = yy)
print(res)

```

In Python, you can use a [`try:` statement with a `except:` clause](https://docs.python.org/3/tutorial/errors.html#handling-exceptions). This functions like an if-else statement, where if no error occurs, the except statement is never executed.

```{python tryexceptdemo, error = T}
try: 
  int("hello")
except ValueError: 
  print("Error: could not turn value into an integer")

```

See more examples of this in the [Input Validation](https://srvanderplas.github.io/stat-computing-r-python/part-gen-prog/05-functions.html#input-validation) section of the textbook.


```{r function-error-fizzbuzz-r, error=TRUE}
library (dplyr)
xx <- sample(1:100, 10) # get a random xx
#xx <- sample ("hello")


##This is the function line 191, line 192 in the logic vector part
fizzbuzz <- function(x) {
  # Check if x is character!! The user will get an error message as the output
  if (!is.numeric (x)) {
    stop("Error: Input must be numeric.")
  }
  
#the fizzbuzz function is applied to the vector xx
  result <- if_else(x %% 3 == 0 & x %% 5 == 0, "FizzBuzz", 
                   if_else(x %% 3 == 0, "Fizz", 
                          if_else(x %% 5 == 0, "Buzz", as.character(x))))
  return(result)
}

# Printing the results in a data frame
res <- cbind(x = xx, fizbuzz = fizzbuzz (xx))
res
```

```{python function-error-fizzbuzz-py}
import pandas as pd
from random import choices
import numpy as np
#this is the 1-100 numbers
xx = np.array(choices(range(1,101), k = 10)) 

def fizzbuzz(x):
  # Check if x is a NumPy array
   # if not isinstance(x, np.ndarray):
    #    raise TypeError("Input must be a NumPy array.")
  
    y = [np.nan] * len(x)  
    
    for i in range(len(x)):
        if x[i] % 3 == 0 and x[i] % 5 == 0:
            y[i] = "FizzBuzz"
        elif x[i] % 3 == 0:
            y[i] = "Fizz"
        elif x[i] % 5 == 0:
            y[i] = "Buzz"
        else:
            y[i] = str(x[i])  # Convert number to string if not divisible by 3 or 5
    
    return y
# Apply the fizzbuzz function to the array xx
yy = fizzbuzz(x=xx)

# Create a DataFrame with the results
res = pd.DataFrame({"x": xx, "result": yy})

#start at 1
res.index = res.index + 1

# Print the DataFrame to see the results
print(res)
```
